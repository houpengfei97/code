class Solution:
    def lengthOfLongestSubstring(self, s: str) -> int:
        #####存储最长的子串长度
        max_len = 0
        ####判断传入的字符串是否为空
        if s is None or len(s) == 0:
            return max_len
        ####定义一个字典，存储不重复字符的值和对应的下标
        dict_list = {}
        ####存储每次循环中最长子串的长度
        one_len = 0
        #####记录最近重复字符所在的下标位置
        start = 0
        for end in range(len(s)):
            ####判断当前字符是否在字典中且当前字符的下标是否大于等于最近重复字符的所在位置
            if (s[end] in dict_list) and (dict_list[s[end]] >= start):
                start = dict_list[s[end]] + 1
            #####此次循环中，最大的不重复子串的长度
            one_len = end - start +1
            #####把当前的位置覆盖字典中的位置
            dict_list[s[end]]  = end
            ######比较此次循环所得的最大子串和历史循环不重复子串长度
            max_len = max(max_len,one_len)
        return max_len

if __name__ == '__main__':
    strlist = "pwwkew"
    obj = Solution()
    print(obj.lengthOfLongestSubstring(strlist))
