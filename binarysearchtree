class TreeNode:
    def __init__(self,root):
        self.val = root
        self.left = None
        self.right = None


class Binarysearchtree:
    def binarysearch(self,root,data):
        if not root:
            return None
        while root:
            if data < root.val:
                root = root.left
            if data > root.val:
                root = root.right
            else:
                return True
        print('The data is not in the tree')
        return False

    def binaryinsert(self,root:TreeNode,data):
        cur = root
        if data == root.val:
            print('The input val is equal to root')
            return -1
        while root:
            if (data < cur.val):
                if (cur.left != None):
                    cur = cur.left
                else:
                    cur.left = TreeNode(data)
                    return root
            if (data > cur.val):
                if (cur.right != None):
                    cur = cur.right
                else:
                    cur.right = TreeNode(data)
                    return root

    def deleteNode(self,root,key):
        if root is None:
            return None
        if root.val == key:
            if root.left is None:
                if root.right is None: #无子节点，直接删除
                    return None
                else:
                    root = root.right #只有右儿子节点，用右儿子替换
            elif root.right is None:
                root = root.left #只有左儿子节点，用左儿子替换
            else:
                buffer = None #buffer用于存放要替换节点的父节点
                tmp = root.right
                while tmp.left is not None:
                    buffer = tmp
                    tmp = tmp.left
                root.val, tmp.val = tmp.val, root.val
                if buffer is None: #buffer为空，则root的右儿子即是目标替换节点
                    root.right = self.deleteNode(tmp, key)
                else:
                    buffer.left = self.deleteNode(tmp, key)
        elif key < root.val:
            root.left = self.deleteNode(root.left, key)
        else:
            root.right = self.deleteNode(root.right, key)
        return root



    def level_list(self,root):
        if not root:
            return False
        result,queue = [],[]
        queue.append(root)
        while queue:
            tmp = queue.pop(0)
            result.append(tmp.val)
            if tmp.left:
                queue.append(tmp.left)
            if tmp.right:
                queue.append(tmp.right)
        return result

if __name__ == '__main__':
    L = [5, 3, 6, 2, 4, 7]
    node1 = TreeNode(5)
    node2 = TreeNode(3)
    node3 = TreeNode(6)
    node4 = TreeNode(2)
    node5 = TreeNode(4)
    node6 = TreeNode(7)

    node1.left = node2
    node1.right = node3
    node2.left = node4
    node2.right = node5
    node3.right = node6
    obj = Binarysearchtree()
    # res = obj.binarysearch(node1,3)
    # print(res)
    insres = obj.binaryinsert(node1,9)
    insres = obj.binaryinsert(node1, 8)
    insres = obj.binaryinsert(node1, 14)
    #insres = obj.binaryinsert(node1, 10)
    treeshow = obj.level_list(insres)
    print(treeshow)
    res = obj.binarysearch(insres,9)
    print(res)
    del_res = obj.deleteNode(node1,9)
    treeshow = obj.level_list(insres)
    print(treeshow)
